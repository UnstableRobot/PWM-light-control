
PWM_Thermostat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000035e  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800108  00800108  000003fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e4  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b4  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e9  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  0000182c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c0  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000295  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001f51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_14>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	41 01       	movw	r8, r2
  6a:	45 01       	movw	r8, r10
  6c:	49 01       	movw	r8, r18
  6e:	4d 01       	movw	r8, r26
  70:	51 01       	movw	r10, r2
  72:	55 01       	movw	r10, r10
  74:	59 01       	movw	r10, r18
  76:	5d 01       	movw	r10, r26
  78:	61 01       	movw	r12, r2
  7a:	65 01       	movw	r12, r10

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ee e5       	ldi	r30, 0x5E	; 94
  90:	f3 e0       	ldi	r31, 0x03	; 3
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a8 30       	cpi	r26, 0x08	; 8
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a8 e0       	ldi	r26, 0x08	; 8
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ae 30       	cpi	r26, 0x0E	; 14
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  b2:	0c 94 ad 01 	jmp	0x35a	; 0x35a <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <shiftBit>:
			break;
	}
}

void shiftBit(){
	PORTB |= (1<<SCK);
  ba:	29 9a       	sbi	0x05, 1	; 5
	PORTB &= ~(1<<SCK);
  bc:	29 98       	cbi	0x05, 1	; 5
  be:	08 95       	ret

000000c0 <timerSetup>:
}

void timerSetup() {
	//Set timer to clear on compare
	TCCR0A = (1<<WGM01);
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	84 bd       	out	0x24, r24	; 36
	//Setup timer interrupt to 2ms - 8bit timer  (timer 0) - 256 prescaler - 125 ticks
	TCCR0B = (1<<CS02);
  c4:	84 e0       	ldi	r24, 0x04	; 4
  c6:	85 bd       	out	0x25, r24	; 37
	OCR0A = 125;
  c8:	8d e7       	ldi	r24, 0x7D	; 125
  ca:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);
  cc:	ee e6       	ldi	r30, 0x6E	; 110
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	80 83       	st	Z, r24
	sei();
  d6:	78 94       	sei
  d8:	08 95       	ret

000000da <updateDisplay>:
}

void updateDisplay(uint8_t digit, uint8_t pattern) {
  da:	ff 92       	push	r15
  dc:	0f 93       	push	r16
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	f8 2e       	mov	r15, r24
  e6:	06 2f       	mov	r16, r22
	//Turn off icons
	PORTB |= (1<<SER);
  e8:	28 9a       	sbi	0x05, 0	; 5
	shiftBit();
  ea:	0e 94 5d 00 	call	0xba	; 0xba <shiftBit>
	shiftBit();
  ee:	0e 94 5d 00 	call	0xba	; 0xba <shiftBit>
  f2:	c0 e0       	ldi	r28, 0x00	; 0
  f4:	d0 e0       	ldi	r29, 0x00	; 0
	
	//Turn on all segments
	for (uint8_t i = 0; i < 7; i++){
		if ((pattern>>i)%2){
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c8 01       	movw	r24, r16
  fa:	0c 2e       	mov	r0, r28
  fc:	02 c0       	rjmp	.+4      	; 0x102 <updateDisplay+0x28>
  fe:	95 95       	asr	r25
 100:	87 95       	ror	r24
 102:	0a 94       	dec	r0
 104:	e2 f7       	brpl	.-8      	; 0xfe <updateDisplay+0x24>
 106:	80 ff       	sbrs	r24, 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <updateDisplay+0x34>
			PORTB &= ~(1<<SER);
 10a:	28 98       	cbi	0x05, 0	; 5
 10c:	01 c0       	rjmp	.+2      	; 0x110 <updateDisplay+0x36>
		} 
		else{
			PORTB |= (1<<SER);
 10e:	28 9a       	sbi	0x05, 0	; 5
		}
		shiftBit();
 110:	0e 94 5d 00 	call	0xba	; 0xba <shiftBit>
 114:	21 96       	adiw	r28, 0x01	; 1
	PORTB |= (1<<SER);
	shiftBit();
	shiftBit();
	
	//Turn on all segments
	for (uint8_t i = 0; i < 7; i++){
 116:	c7 30       	cpi	r28, 0x07	; 7
 118:	d1 05       	cpc	r29, r1
 11a:	71 f7       	brne	.-36     	; 0xf8 <updateDisplay+0x1e>
 11c:	c0 e0       	ldi	r28, 0x00	; 0
		shiftBit();
	}
	
	//Enable all digits
	for (uint8_t j = 0; j < 3; j++){
		if (j == digit){
 11e:	fc 12       	cpse	r15, r28
 120:	04 c0       	rjmp	.+8      	; 0x12a <updateDisplay+0x50>
			PORTB |= (1<<SER);
 122:	28 9a       	sbi	0x05, 0	; 5
			shiftBit();
 124:	0e 94 5d 00 	call	0xba	; 0xba <shiftBit>
 128:	03 c0       	rjmp	.+6      	; 0x130 <updateDisplay+0x56>
		} 
		else {
			PORTB &= ~(1<<SER);
 12a:	28 98       	cbi	0x05, 0	; 5
			shiftBit();
 12c:	0e 94 5d 00 	call	0xba	; 0xba <shiftBit>
		}
		shiftBit();
	}
	
	//Enable all digits
	for (uint8_t j = 0; j < 3; j++){
 130:	cf 5f       	subi	r28, 0xFF	; 255
 132:	c3 30       	cpi	r28, 0x03	; 3
 134:	a1 f7       	brne	.-24     	; 0x11e <updateDisplay+0x44>
			PORTB &= ~(1<<SER);
			shiftBit();
		}
	}
	
	PORTB |= (1<<RCK);
 136:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= ~(1<<RCK);
 138:	2a 98       	cbi	0x05, 2	; 5
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	1f 91       	pop	r17
 140:	0f 91       	pop	r16
 142:	ff 90       	pop	r15
 144:	08 95       	ret

00000146 <main>:

int delay = 0;

int main(void) {
    //Set up IO for display
	DDRB |= (1<<SER) | (1<<SCK) | (1<<RCK);
 146:	84 b1       	in	r24, 0x04	; 4
 148:	87 60       	ori	r24, 0x07	; 7
 14a:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<0);
 14c:	28 98       	cbi	0x05, 0	; 5
	
	//Set up IO for buttons
	DDRD &= ~((1<<Btn0) | (1<<Btn1) |  (1<<Btn2));
 14e:	8a b1       	in	r24, 0x0a	; 10
 150:	83 7e       	andi	r24, 0xE3	; 227
 152:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<Btn0) | (1<<Btn1) | (1<<Btn2);
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	8c 61       	ori	r24, 0x1C	; 28
 158:	8b b9       	out	0x0b, r24	; 11
	
	curBtn = PIND;
 15a:	89 b1       	in	r24, 0x09	; 9
 15c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <curBtn>
	lBtn = curBtn;
 160:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <lBtn>
	
	timerSetup();
 164:	0e 94 60 00 	call	0xc0	; 0xc0 <timerSetup>
	updateDisplay(digit_0, curDigit);
 168:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <curDigit>
 16c:	8e e7       	ldi	r24, 0x7E	; 126
 16e:	0e 94 6d 00 	call	0xda	; 0xda <updateDisplay>
 172:	ff cf       	rjmp	.-2      	; 0x172 <main+0x2c>

00000174 <__vector_14>:
	
    while (1) {
    }
}

ISR(TIMER0_COMPA_vect) {
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
	//Check buttons
	curBtn = PIND;
 19a:	89 b1       	in	r24, 0x09	; 9
 19c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <curBtn>
	if (!(curBtn & (1<<Btn0)) && (lBtn & (1<<Btn0))){
 1a0:	82 fd       	sbrc	r24, 2
 1a2:	09 c0       	rjmp	.+18     	; 0x1b6 <__vector_14+0x42>
 1a4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <lBtn>
 1a8:	92 ff       	sbrs	r25, 2
 1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <__vector_14+0x42>
		curDigit++;
 1ac:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <curDigit>
 1b0:	9f 5f       	subi	r25, 0xFF	; 255
 1b2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <curDigit>
	}
	if (!(curBtn & (1<<Btn1)) && (lBtn & (1<<Btn1))){
 1b6:	83 fd       	sbrc	r24, 3
 1b8:	07 c0       	rjmp	.+14     	; 0x1c8 <__vector_14+0x54>
 1ba:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <lBtn>
 1be:	93 ff       	sbrs	r25, 3
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <__vector_14+0x54>
		curDigit = 1;
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <curDigit>
	}
	if (!(curBtn & (1<<Btn2)) && (lBtn & (1<<Btn2))){
 1c8:	84 fd       	sbrc	r24, 4
 1ca:	09 c0       	rjmp	.+18     	; 0x1de <__vector_14+0x6a>
 1cc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <lBtn>
 1d0:	94 ff       	sbrs	r25, 4
 1d2:	05 c0       	rjmp	.+10     	; 0x1de <__vector_14+0x6a>
		curDigit--;
 1d4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <curDigit>
 1d8:	91 50       	subi	r25, 0x01	; 1
 1da:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <curDigit>
	}
	lBtn = curBtn;
 1de:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <lBtn>
	
	if (delay < 250){
 1e2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 1e6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 1ea:	8a 3f       	cpi	r24, 0xFA	; 250
 1ec:	91 05       	cpc	r25, r1
 1ee:	34 f4       	brge	.+12     	; 0x1fc <__vector_14+0x88>
		delay++;
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 1f6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 1fa:	09 c0       	rjmp	.+18     	; 0x20e <__vector_14+0x9a>
	} 
	else {
		delay = 0;
 1fc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
 200:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
		count++;
 204:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <count>
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <count>
	}
	
	if (curDigit < 2){
 20e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <curDigit>
 212:	82 30       	cpi	r24, 0x02	; 2
 214:	20 f4       	brcc	.+8      	; 0x21e <__vector_14+0xaa>
		curDigit++;
 216:	8f 5f       	subi	r24, 0xFF	; 255
 218:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <curDigit>
 21c:	02 c0       	rjmp	.+4      	; 0x222 <__vector_14+0xae>
	} 
	else {
		curDigit = 0;
 21e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <curDigit>
	}
	
	int buffer = count;
 222:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <count>
 226:	30 e0       	ldi	r19, 0x00	; 0
	curNr[2] = buffer%10;
 228:	e0 e0       	ldi	r30, 0x00	; 0
 22a:	f1 e0       	ldi	r31, 0x01	; 1
 22c:	ca e0       	ldi	r28, 0x0A	; 10
 22e:	d0 e0       	ldi	r29, 0x00	; 0
 230:	c9 01       	movw	r24, r18
 232:	be 01       	movw	r22, r28
 234:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__divmodhi4>
 238:	95 83       	std	Z+5, r25	; 0x05
 23a:	84 83       	std	Z+4, r24	; 0x04
	curNr[1] = (buffer/10)%10;
 23c:	cb 01       	movw	r24, r22
 23e:	be 01       	movw	r22, r28
 240:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__divmodhi4>
 244:	93 83       	std	Z+3, r25	; 0x03
 246:	82 83       	std	Z+2, r24	; 0x02
	curNr[0] = (buffer/100)%10;
 248:	c9 01       	movw	r24, r18
 24a:	64 e6       	ldi	r22, 0x64	; 100
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__divmodhi4>
 252:	cb 01       	movw	r24, r22
 254:	be 01       	movw	r22, r28
 256:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__divmodhi4>
 25a:	91 83       	std	Z+1, r25	; 0x01
 25c:	80 83       	st	Z, r24
	
	switch(curNr[curDigit]) {
 25e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <curDigit>
 262:	e8 2f       	mov	r30, r24
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	ee 0f       	add	r30, r30
 268:	ff 1f       	adc	r31, r31
 26a:	e0 50       	subi	r30, 0x00	; 0
 26c:	ff 4f       	sbci	r31, 0xFF	; 255
 26e:	01 90       	ld	r0, Z+
 270:	f0 81       	ld	r31, Z
 272:	e0 2d       	mov	r30, r0
 274:	ea 30       	cpi	r30, 0x0A	; 10
 276:	f1 05       	cpc	r31, r1
 278:	60 f5       	brcc	.+88     	; 0x2d2 <__vector_14+0x15e>
 27a:	ec 5c       	subi	r30, 0xCC	; 204
 27c:	ff 4f       	sbci	r31, 0xFF	; 255
 27e:	0c 94 93 01 	jmp	0x326	; 0x326 <__tablejump2__>
		case 0:
			updateDisplay(curDigit, digit_0);
 282:	6e e7       	ldi	r22, 0x7E	; 126
 284:	0e 94 6d 00 	call	0xda	; 0xda <updateDisplay>
			break;
 288:	27 c0       	rjmp	.+78     	; 0x2d8 <__vector_14+0x164>
		case 1:
			updateDisplay(curDigit, digit_1);
 28a:	60 e3       	ldi	r22, 0x30	; 48
 28c:	0e 94 6d 00 	call	0xda	; 0xda <updateDisplay>
			break;
 290:	23 c0       	rjmp	.+70     	; 0x2d8 <__vector_14+0x164>
		case 2:
			updateDisplay(curDigit, digit_2);
 292:	6d e6       	ldi	r22, 0x6D	; 109
 294:	0e 94 6d 00 	call	0xda	; 0xda <updateDisplay>
			break;
 298:	1f c0       	rjmp	.+62     	; 0x2d8 <__vector_14+0x164>
		case 3:
			updateDisplay(curDigit, digit_3);
 29a:	69 e7       	ldi	r22, 0x79	; 121
 29c:	0e 94 6d 00 	call	0xda	; 0xda <updateDisplay>
			break;
 2a0:	1b c0       	rjmp	.+54     	; 0x2d8 <__vector_14+0x164>
		case 4:
			updateDisplay(curDigit, digit_4);
 2a2:	63 e3       	ldi	r22, 0x33	; 51
 2a4:	0e 94 6d 00 	call	0xda	; 0xda <updateDisplay>
			break;
 2a8:	17 c0       	rjmp	.+46     	; 0x2d8 <__vector_14+0x164>
		case 5:
			updateDisplay(curDigit, digit_5);
 2aa:	6b e5       	ldi	r22, 0x5B	; 91
 2ac:	0e 94 6d 00 	call	0xda	; 0xda <updateDisplay>
			break;
 2b0:	13 c0       	rjmp	.+38     	; 0x2d8 <__vector_14+0x164>
		case 6:
			updateDisplay(curDigit, digit_6);
 2b2:	6f e1       	ldi	r22, 0x1F	; 31
 2b4:	0e 94 6d 00 	call	0xda	; 0xda <updateDisplay>
			break;
 2b8:	0f c0       	rjmp	.+30     	; 0x2d8 <__vector_14+0x164>
		case 7:
			updateDisplay(curDigit, digit_7);
 2ba:	60 e7       	ldi	r22, 0x70	; 112
 2bc:	0e 94 6d 00 	call	0xda	; 0xda <updateDisplay>
			break;
 2c0:	0b c0       	rjmp	.+22     	; 0x2d8 <__vector_14+0x164>
		case 8:
			updateDisplay(curDigit, digit_8);
 2c2:	6f e7       	ldi	r22, 0x7F	; 127
 2c4:	0e 94 6d 00 	call	0xda	; 0xda <updateDisplay>
			break;
 2c8:	07 c0       	rjmp	.+14     	; 0x2d8 <__vector_14+0x164>
		case 9:
			updateDisplay(curDigit, digit_9);
 2ca:	63 e7       	ldi	r22, 0x73	; 115
 2cc:	0e 94 6d 00 	call	0xda	; 0xda <updateDisplay>
			break;
 2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <__vector_14+0x164>
		default:
			updateDisplay(curDigit, digit_0);
 2d2:	6e e7       	ldi	r22, 0x7E	; 126
 2d4:	0e 94 6d 00 	call	0xda	; 0xda <updateDisplay>
			break;
	}
}
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	bf 91       	pop	r27
 2e2:	af 91       	pop	r26
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	7f 91       	pop	r23
 2ea:	6f 91       	pop	r22
 2ec:	5f 91       	pop	r21
 2ee:	4f 91       	pop	r20
 2f0:	3f 91       	pop	r19
 2f2:	2f 91       	pop	r18
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <__divmodhi4>:
 2fe:	97 fb       	bst	r25, 7
 300:	07 2e       	mov	r0, r23
 302:	16 f4       	brtc	.+4      	; 0x308 <__divmodhi4+0xa>
 304:	00 94       	com	r0
 306:	07 d0       	rcall	.+14     	; 0x316 <__divmodhi4_neg1>
 308:	77 fd       	sbrc	r23, 7
 30a:	09 d0       	rcall	.+18     	; 0x31e <__divmodhi4_neg2>
 30c:	0e 94 99 01 	call	0x332	; 0x332 <__udivmodhi4>
 310:	07 fc       	sbrc	r0, 7
 312:	05 d0       	rcall	.+10     	; 0x31e <__divmodhi4_neg2>
 314:	3e f4       	brtc	.+14     	; 0x324 <__divmodhi4_exit>

00000316 <__divmodhi4_neg1>:
 316:	90 95       	com	r25
 318:	81 95       	neg	r24
 31a:	9f 4f       	sbci	r25, 0xFF	; 255
 31c:	08 95       	ret

0000031e <__divmodhi4_neg2>:
 31e:	70 95       	com	r23
 320:	61 95       	neg	r22
 322:	7f 4f       	sbci	r23, 0xFF	; 255

00000324 <__divmodhi4_exit>:
 324:	08 95       	ret

00000326 <__tablejump2__>:
 326:	ee 0f       	add	r30, r30
 328:	ff 1f       	adc	r31, r31
 32a:	05 90       	lpm	r0, Z+
 32c:	f4 91       	lpm	r31, Z
 32e:	e0 2d       	mov	r30, r0
 330:	09 94       	ijmp

00000332 <__udivmodhi4>:
 332:	aa 1b       	sub	r26, r26
 334:	bb 1b       	sub	r27, r27
 336:	51 e1       	ldi	r21, 0x11	; 17
 338:	07 c0       	rjmp	.+14     	; 0x348 <__udivmodhi4_ep>

0000033a <__udivmodhi4_loop>:
 33a:	aa 1f       	adc	r26, r26
 33c:	bb 1f       	adc	r27, r27
 33e:	a6 17       	cp	r26, r22
 340:	b7 07       	cpc	r27, r23
 342:	10 f0       	brcs	.+4      	; 0x348 <__udivmodhi4_ep>
 344:	a6 1b       	sub	r26, r22
 346:	b7 0b       	sbc	r27, r23

00000348 <__udivmodhi4_ep>:
 348:	88 1f       	adc	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	5a 95       	dec	r21
 34e:	a9 f7       	brne	.-22     	; 0x33a <__udivmodhi4_loop>
 350:	80 95       	com	r24
 352:	90 95       	com	r25
 354:	bc 01       	movw	r22, r24
 356:	cd 01       	movw	r24, r26
 358:	08 95       	ret

0000035a <_exit>:
 35a:	f8 94       	cli

0000035c <__stop_program>:
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stop_program>
